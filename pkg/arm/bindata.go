// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/etc/etcd/ca.crt
// data/etc/etcd/etcd.conf
// data/etc/etcd/peer.crt
// data/etc/etcd/peer.key
// data/etc/etcd/server.crt
// data/etc/etcd/server.key
// data/etc/origin/master/admin.kubeconfig
// data/etc/origin/master/aggregator-front-proxy.crt
// data/etc/origin/master/aggregator-front-proxy.key
// data/etc/origin/master/ca.crt
// data/etc/origin/master/ca.key
// data/etc/origin/master/front-proxy-ca.crt
// data/etc/origin/master/master-config.yaml
// data/etc/origin/master/master.etcd-ca.crt
// data/etc/origin/master/master.etcd-client.crt
// data/etc/origin/master/master.etcd-client.key
// data/etc/origin/master/master.kubelet-client.crt
// data/etc/origin/master/master.kubelet-client.key
// data/etc/origin/master/master.proxy-client.crt
// data/etc/origin/master/master.proxy-client.key
// data/etc/origin/master/master.server.crt
// data/etc/origin/master/master.server.key
// data/etc/origin/master/named/console.crt
// data/etc/origin/master/named/console.key
// data/etc/origin/master/openshift-master.kubeconfig
// data/etc/origin/master/scheduler.json
// data/etc/origin/master/service-signer.crt
// data/etc/origin/master/service-signer.key
// data/etc/origin/master/serviceaccounts.private.key
// data/etc/origin/master/serviceaccounts.public.key
// data/etc/origin/master/session-secrets.yaml
// data/etc/origin/node/ca.crt
// data/etc/origin/node/client-ca.crt
// data/etc/origin/node/node.kubeconfig
// data/etc/origin/node/pods/apiserver.yaml
// data/etc/origin/node/pods/controllers.yaml
// data/etc/origin/node/pods/etcd.yaml
// data/etc/origin/node/pods/sync.yaml
// data/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdCaCrt,
		"etc/etcd/ca.crt",
	)
}

func etcEtcdCaCrt() (*asset, error) {
	bytes, err := etcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x4e\xfa\x30\x14\xc6\xef\xff\x4f\xc1\x03\xfc\xdd\xc6\x44\x70\x24\xbd\x28\xdb\x31\x34\x94\xa2\xdd\x19\x09\x57\xcd\xc4\x26\x1a\x45\x49\x57\x89\x86\xf0\xee\x86\x16\x61\xc2\x88\x6e\xd9\x4d\xbf\x5f\xbf\xb3\xef\x9c\x03\x98\x66\x8a\x66\x53\x90\xc8\x72\x50\x29\x67\x20\x50\x15\x92\xe7\xe4\xd1\xda\x65\xd5\x0f\xc3\xf5\xba\x15\xc0\x87\x35\x65\x30\x7c\xab\xec\x6b\xb9\xd0\xad\xcd\xa6\x1f\x5f\xf6\x92\x7f\xee\x76\x0a\x12\xd5\x0d\xe3\x40\x42\x6d\xe7\xdb\xef\x21\xac\xb4\x59\x69\x13\xcc\x8d\xdd\x31\xde\xd7\xa1\xb4\xc0\x21\xb1\xe6\x5d\x7b\x29\xa3\x48\x55\xc6\x24\x09\x57\xa5\x09\x5f\x9e\xee\x9d\x83\xd7\x80\x43\x8a\x6c\x22\x14\xb2\x31\x4c\x0a\x24\xf1\x55\x14\x79\x69\x08\x54\xe2\x00\x28\x2a\x26\x10\xe4\x94\x72\xb2\xd7\x98\x60\xc8\x28\xaf\xe5\xba\x05\x90\x7f\x4b\x75\x7d\xe4\x91\xf2\x22\x47\x90\x64\x51\x56\x56\x9b\x8b\xc8\x3d\x7b\x97\x1f\xa7\xee\xf6\xff\xfa\x51\xbb\x11\x6c\x9f\x82\x71\x23\x18\xd7\xfe\x67\x04\xb3\x33\x4d\x7e\xd6\x9f\x1e\xe1\x2c\x47\x10\x8d\x33\x8c\x02\xf7\xd6\xa6\xb6\x83\x4f\x1b\x73\x40\xbf\x4b\x0b\x3a\x06\xd2\xd8\x2f\xaf\x3b\x8f\xa6\x2d\x58\xea\xfa\x0e\x78\xec\xfc\x22\x38\xbd\x21\xa6\x73\xd9\x87\x74\x14\xca\xed\x50\x32\x95\xd2\x63\x78\x5e\x1e\x0a\xde\x15\x13\xa4\x6a\x40\xd3\x11\x88\x4c\x0d\x66\x08\x39\xe9\xc4\x49\x27\xe9\xf6\xe2\xa4\xeb\x99\x5f\x9d\xbe\x02\x00\x00\xff\xff\x3d\x31\x31\xc4\x21\x03\x00\x00")

func etcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdEtcdConf,
		"etc/etcd/etcd.conf",
	)
}

func etcEtcdEtcdConf() (*asset, error) {
	bytes, err := etcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func etcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerCrt,
		"etc/etcd/peer.crt",
	)
}

func etcEtcdPeerCrt() (*asset, error) {
	bytes, err := etcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func etcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerKey,
		"etc/etcd/peer.key",
	)
}

func etcEtcdPeerKey() (*asset, error) {
	bytes, err := etcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func etcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerCrt,
		"etc/etcd/server.crt",
	)
}

func etcEtcdServerCrt() (*asset, error) {
	bytes, err := etcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func etcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerKey,
		"etc/etcd/server.key",
	)
}

func etcEtcdServerKey() (*asset, error) {
	bytes, err := etcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAdminKubeconfig,
		"etc/origin/master/admin.kubeconfig",
	)
}

func etcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyCrt,
		"etc/origin/master/aggregator-front-proxy.crt",
	)
}

func etcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyKey,
		"etc/origin/master/aggregator-front-proxy.key",
	)
}

func etcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaCrt,
		"etc/origin/master/ca.crt",
	)
}

func etcOriginMasterCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func etcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaKey,
		"etc/origin/master/ca.key",
	)
}

func etcOriginMasterCaKey() (*asset, error) {
	bytes, err := etcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func etcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterFrontProxyCaCrt,
		"etc/origin/master/front-proxy-ca.crt",
	)
}

func etcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x6f\x1b\xb9\x11\xff\xae\xbf\x82\xf0\x97\xdc\x15\xdd\x5d\xf9\x95\xc7\x02\xfd\xa0\xda\xe7\x9e\x70\x8e\xa3\x4a\x49\x51\xa0\x28\x0a\x8a\x1c\xad\x18\x71\xc9\x35\x1f\x3a\xeb\x5c\xff\xef\x05\x1f\xbb\x4b\xad\xe4\x9c\x71\x4d\xda\x73\x3e\x44\xcb\xf9\xcd\x70\x5e\x9c\x19\x12\xd3\x9a\x69\xcd\xa4\xb8\x92\x62\xc5\xaa\x72\x84\x50\xc3\x6d\xc5\x92\x6f\x84\xfe\x6c\x19\xa7\xd7\xb0\xc2\x96\x1b\x1d\x96\x10\x22\x1e\x60\x15\x36\x4c\x8a\x76\x11\x21\xdc\xb0\xbf\x81\x72\x12\x4b\xb4\x3d\xed\x96\x41\x6c\x4b\xf4\x8f\x7f\x76\xdf\x1b\x26\x68\xb9\x2f\x38\xec\xd8\x21\x14\x68\x69\x15\x01\xdd\xcb\x46\x88\xb3\x9a\x19\x5d\xa2\xc7\xa7\x64\x51\xc1\xbd\x05\x9d\x2c\x7b\xb1\x1f\xb6\xa0\x14\xa3\xf0\x1b\x15\x4e\x14\xec\x24\x25\x1a\xca\x06\x84\x5e\xb3\x95\xc9\x99\x2c\xa6\x35\xae\x60\x26\x39\x23\xbb\xdf\xe8\x9d\x07\x20\xd6\x21\xe7\x96\xa7\x06\x67\xa8\xc6\x86\xac\xbd\xfc\x89\x10\xd2\x78\x71\x7b\x1e\xc9\xd0\x06\x76\x25\x62\x0e\xa2\xf3\x3d\xb5\x28\x88\x5d\xd6\x89\x4e\x78\x10\xda\x62\x6e\xa1\x44\xaf\x8c\xb2\xf0\x2a\xa1\x08\x5c\x43\xd9\xab\x93\x51\x10\x0c\x68\x02\x90\x62\x7e\x2c\x2e\x59\x17\xae\x12\x35\x92\xea\x67\x48\x4b\xe7\x4e\xbd\x17\xba\xcf\x40\x4c\x89\x9c\x1e\xc9\xb2\xde\xb0\xe6\x83\xdf\x89\x7b\x3d\x6e\x30\xe3\x56\xc1\x00\x17\x42\x94\x38\x3f\xc6\x07\x5b\xca\x4c\x9f\xbf\x20\xf0\x92\x03\x8d\xcc\xb8\xaa\x14\x54\xd8\x48\x95\x64\xbc\x92\x0f\xbb\x2b\xce\x40\x98\xa9\x58\xc9\x60\x18\x01\x65\x6e\x18\x87\x12\xf5\x2c\xd9\x4a\x49\x61\x32\x8f\xcf\x89\x32\x1e\xb8\x81\xdd\x17\x71\x1b\xd8\x8d\x70\xc3\x6e\x61\x0b\x5c\x97\xa3\xcc\x05\x7e\x90\x07\xd8\x9a\x75\xaf\x4e\xcc\xe7\x1f\x01\x53\x50\x51\x19\xaf\xdc\xd5\xa4\x44\x89\xe4\x8c\xe0\x4e\x89\x08\x90\x75\x2d\xc5\x1d\xae\xdb\xe8\x64\xcf\x28\x35\x0a\x59\x67\x14\x0e\xbb\xcc\x14\xac\xd8\x43\xcf\xf5\xf7\x6c\x0e\xb5\x34\x90\xfd\xe0\x30\x99\x5f\xad\x94\xb4\x4d\x80\x1f\xe2\xfe\xe2\x88\x7e\xd1\x6a\x50\x2e\x8d\x9e\x43\x7e\xd2\xa0\x46\x44\x0a\xa3\x24\xe7\x90\x44\x01\x38\x90\xfe\xb4\x70\x49\x36\x77\x3e\x1b\xbb\x9c\xce\x6a\xac\x0d\xa8\xac\x67\x76\xa9\xa4\x41\x6d\x19\x81\x85\xfb\x4f\x54\x57\xa0\x4c\x10\xa0\x59\x25\x5a\xf7\xa5\xd1\x8c\xf8\x2c\xd0\x3b\x07\x26\x71\x1c\x20\x5c\xfc\x92\x2d\x4b\x74\xf2\x87\x93\x11\x91\x4a\x4f\x38\x97\x3f\x03\xfd\xa0\x58\xc5\xdc\xa1\xa4\x42\xf7\xd6\x2c\x99\xa0\x13\x4a\x15\x68\x5d\xa2\x71\xee\xff\x95\x6f\xc7\x97\xe7\x91\x76\x07\xe6\x67\xa9\x36\x25\x32\xa4\xb9\x18\x81\x21\x74\x3f\x01\x09\x2e\x51\xb0\x37\x77\xc4\x3e\xd6\xbd\x25\x7b\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\x5a\x1b\xd3\xe8\xb2\x28\x1e\x1f\x51\xee\x83\x9d\xff\x28\xb5\x71\x01\x44\x4f\x4f\xe5\xd9\xf9\x9b\x77\x5e\xb9\x85\x91\x0a\x57\xd0\xdb\xb7\xb1\x4b\x50\x02\x0c\xe8\x48\x0a\x29\x54\x26\x84\x9c\xc9\x63\xc0\xfd\x02\xe8\xa2\xbb\x70\xd1\x1d\x88\x49\x2b\xd9\x11\x58\x2a\xc4\xd7\xbe\x5e\xb3\x95\x54\x35\x36\x25\x72\x16\x85\xd5\x7c\x1a\xaa\xe3\x8d\xa7\xa0\xa7\xa7\xc0\x92\x16\x0d\xc7\xc8\x84\x71\xa9\xcb\xe7\x50\x31\x6d\xd4\xae\x75\x44\x89\xa8\x24\x1b\x50\x99\x8a\x84\x9c\x86\x96\x95\xeb\x2d\x29\x2f\xc7\xe3\xf1\x28\x94\xa2\xf7\xde\xdd\xb1\x0a\x39\xbb\x39\x98\xc3\xa8\x3e\x1f\xc9\xc8\xf2\xe5\x60\x0e\x40\x21\x9e\x8d\x54\xa6\x44\xa7\xe3\xb3\xcb\xf1\xa8\x77\x78\xaa\x8f\xdb\x1d\x37\xcc\x1d\x13\x50\x13\x55\xd9\x1a\x44\xdb\xcc\x09\x97\x96\x66\x24\xe9\xf8\x19\x2a\xc0\x90\x42\xfa\xd4\x2e\x3c\xbd\x51\x72\xcb\x28\xa8\x02\xff\x62\x15\xe4\x0e\x9d\x30\xb7\xd4\xae\xec\x38\x50\x38\x87\x21\x60\xd9\x12\x93\x0d\x08\xda\x02\x5c\x52\x9d\xef\x01\x6a\xa0\x0c\x67\x66\xd7\x40\x27\xa4\x69\x38\x23\xbe\xe7\x15\x5b\x41\xf3\x24\xb5\x1a\x25\x8d\x5c\x5a\xa7\x42\x7f\x36\xff\x97\x66\x11\x6e\x7d\x31\x72\x45\x82\x89\x2a\x73\xc1\xcc\x56\x2e\x50\x47\x76\x0a\xa1\x2b\xf6\xea\xf5\x3e\xfb\x06\x76\x2f\xe0\x0e\xc1\x0e\xdf\xd3\x59\x89\x4e\xcf\xde\xf8\xca\x72\xfa\xeb\x4d\x2c\x66\x4f\x6c\x1c\x69\x82\x1d\xa6\xd8\x1e\x28\xec\xa9\xc9\x1a\xa8\xed\xea\x75\x80\x1f\x51\xb2\xc3\xe5\x9f\xb5\x9f\x39\x62\x31\xd5\x77\x92\xc2\x4c\x2a\x33\xc7\xa2\x72\x93\xc7\xab\x84\xb6\xb0\x4b\x01\x2e\x7f\xdf\x9c\xe5\xe7\xbe\x52\x16\xa7\xaf\x47\x41\x62\xb0\xc8\x47\x14\x1e\xc2\xf9\xfc\xa9\x4b\x83\xab\xd8\xf5\x84\x08\xad\x63\x30\xf3\x61\x42\xa0\x71\x64\x03\xc2\x7c\xdc\x35\xa0\xcb\x97\xe4\xd4\x1f\x53\x4c\x34\x03\xa1\xa5\x55\xda\x94\xe8\x62\x3c\x1e\xc5\x01\xaf\x95\xfa\x22\xa1\x9e\xe9\xbe\xd1\x25\x3a\xf3\x12\x0e\x8d\x71\xbf\xe2\x59\x0d\xee\xe9\x4a\xe0\xad\x94\x8d\x3b\x3e\xff\x07\x73\x5f\xff\xd7\xe6\x9e\x7b\x09\x07\xb6\xa4\xd6\x0e\x3b\xbc\x17\x18\xce\x6d\xcc\x82\x99\x5d\x72\x46\x3e\xcd\x6f\x7d\x59\x6f\x14\x13\x06\x9d\xb4\xad\xeb\x04\x7d\x97\x5f\x83\x62\x5b\xa0\x79\x00\x76\x2d\xcc\x35\x00\x83\x99\x00\xb5\x08\xb9\xf6\x3d\xfa\x37\xba\xb7\xd2\xb8\xee\x36\x12\xa1\x07\xf7\x05\x32\x9e\xca\xd8\x9b\x63\x87\x24\x8c\x2a\x57\x5b\xf3\xd3\xb3\xb7\x21\x37\x2f\xbc\x75\x6b\xa9\x4d\xc8\xdc\x5b\x10\x95\x59\x97\xe8\x5d\x12\xd7\xe9\x2c\x4a\xb9\x9a\x5e\xcf\xa3\xa4\x38\x06\x14\xce\x21\x71\xef\x99\xbf\x6c\x85\x41\x47\x01\x5d\x63\x53\xf4\xde\x90\x5b\x9d\x45\x5c\xe3\x7b\x55\x7f\x66\x12\xe1\xc3\x73\x23\xf7\xa7\x49\xac\x35\x98\xaf\xe8\xbf\x93\x82\x48\xa1\x25\x87\xe2\x24\xf5\xa5\x9b\x0f\xb1\x30\xe9\xb5\xb1\x06\xb3\x96\xb4\x44\xd8\x1a\xd7\xc2\x19\x05\x61\x98\xd9\xcd\x62\x4d\x8d\x4e\xe1\xb2\x62\x22\x99\xec\x6b\xdc\x34\x4c\x54\xef\x23\x33\xe1\x98\xd5\xa3\xfe\x6e\xf2\xf8\x88\xbe\x63\x82\xc2\xc3\xa1\x6e\xf9\x4c\xc9\x06\x94\x61\xa0\xf3\x89\x35\xeb\x99\x92\xae\xa4\xe6\xd3\xe1\xc6\x68\xfc\x7d\xee\x5c\xbe\xaf\xbf\x2f\xa1\x49\xb5\x7f\xe6\xb6\xe6\x15\x4a\x2e\x3f\x50\x63\xc6\xd3\x2b\x9b\x5f\xe8\xbe\x19\x4d\x69\xda\x2e\x47\x7b\x77\xad\x84\xe6\xbe\xbb\xcf\x46\xc1\x0a\x94\x02\xfa\x29\x8e\xd3\x29\xd2\x0a\x76\x6f\xe1\x5f\x09\x43\xa8\xd5\xd3\xeb\xaf\xe7\x9f\xf6\x23\x8f\x2d\xe5\x7a\xe8\xac\x76\xd3\x05\x10\x05\xe6\x1b\x6c\x1c\x04\x1f\x6e\x1b\x66\xad\x0f\x0d\x88\xe9\xf5\x50\x42\x84\xb4\xe3\x6d\x0c\xa3\x35\x6b\xa9\xd8\x2f\x70\x2c\xf9\x7d\xfa\xe5\x35\x23\x4a\x6a\xb9\x32\x52\x70\x26\xdc\x18\x50\xbb\x63\xf1\x55\xed\xf9\x08\x02\x7b\x47\x9e\x14\xfe\x88\x9e\x15\x9d\x62\x27\x87\x56\x22\x64\xe4\x06\xc4\xef\x4d\x65\xaf\xd4\x40\xdd\xd8\xa8\x27\xc9\x68\xfb\x2d\xab\x76\x2b\xfd\x59\xb9\x5f\x34\xfe\xe6\xaf\xd7\x77\xfb\xd2\x34\x0c\x1e\xc0\xba\xa5\xf7\xf8\x61\x52\xc1\xc2\xb5\x22\xea\x3a\x59\xdb\x0c\x23\x39\x54\x6d\xad\x45\xba\x18\xb2\x56\x3f\x3f\x20\x05\x58\xa6\x03\x2e\xdf\xe1\xda\x15\x0b\xef\xd7\x54\x05\xd7\xcc\xb5\xfe\xe8\x96\x07\x6a\xbc\x7d\xdd\xce\x20\x5d\xfe\x1c\x83\x5d\x8e\xc7\xa3\x46\xc9\xcf\x40\x92\xa2\x1c\x2f\x2e\x6e\x18\x5b\xf8\xfb\xb6\x54\x25\x12\x92\x42\xa6\x24\x87\x7c\xef\xee\x56\x10\x59\x37\xd6\xc0\x9f\x62\x69\xd6\x40\xac\x62\x66\xe7\xae\xbd\x04\x3b\xce\x50\xaf\x89\xee\x56\xe2\x70\xa7\xc7\x65\x71\xd6\x12\x6f\xf1\x12\xb8\x9e\x81\x9a\x05\x65\x4a\x74\x19\xde\x09\x18\x1d\xf2\x9d\x8e\xdb\xbf\xec\xf4\x5d\xfb\x57\xf8\xd5\x91\x92\xd6\xb8\xfb\x7d\x67\x8a\xb6\x4b\x2a\x6b\xcc\xc4\x8b\x4b\xcf\x5c\x5a\xe3\xd5\x70\x99\x1f\x12\xdd\xe7\xdd\xa2\x95\x94\xe6\x45\xec\xb3\x13\x42\xa4\x4d\xdb\x5a\x8d\x05\xae\x80\x76\x6f\x2c\x59\xeb\x53\xff\xdb\x3f\x70\xf9\x32\xe4\xd6\x1b\x2e\x77\xfe\xe3\xc8\x09\x69\x14\xdb\x62\x03\x3f\x0d\x1e\x1d\x70\xd8\xcf\x0d\x52\x9e\xde\xde\xef\xbc\xa2\x11\x1c\xf7\x3d\xe0\xf0\x18\xcf\xa0\xc3\x63\x48\x7b\x0f\x38\xfa\x16\x71\x71\x71\xfc\x29\xe2\xc8\xa5\x41\xfb\x4b\x63\x7b\x6b\xed\x9e\xa2\x3a\x5b\x86\xf7\x87\x88\x6f\x6f\x2b\x0f\xf3\xf8\x40\x3b\x15\x37\x9c\x55\x6b\x13\x92\xb3\x7b\xe8\xfa\xc8\x6a\x90\xd6\x0c\xcf\x99\x2b\x05\xf4\xca\xc5\x6e\xe5\x86\xcd\x38\xe5\x66\x89\x7a\x47\x8e\x97\x67\x6a\x27\x94\xfe\x71\xa7\xd3\xf0\x57\x59\x82\xd2\xb1\x3d\x77\x4d\x24\xf3\xaf\x09\x2f\x2d\x57\x69\x1e\x6d\x25\xb7\x75\xf2\x3a\x41\x77\x02\xd7\x8c\xf8\x12\xeb\x0a\x01\x13\xd5\x0f\x7b\x0f\x94\xff\x09\x00\x00\xff\xff\x0c\x50\x75\x29\x92\x17\x00\x00")

func etcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterConfigYaml,
		"etc/origin/master/master-config.yaml",
	)
}

func etcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := etcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdCaCrt,
		"etc/origin/master/master.etcd-ca.crt",
	)
}

func etcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func etcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientCrt,
		"etc/origin/master/master.etcd-client.crt",
	)
}

func etcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func etcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientKey,
		"etc/origin/master/master.etcd-client.key",
	)
}

func etcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func etcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientCrt,
		"etc/origin/master/master.kubelet-client.crt",
	)
}

func etcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func etcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientKey,
		"etc/origin/master/master.kubelet-client.key",
	)
}

func etcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func etcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientCrt,
		"etc/origin/master/master.proxy-client.crt",
	)
}

func etcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func etcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientKey,
		"etc/origin/master/master.proxy-client.key",
	)
}

func etcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func etcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerCrt,
		"etc/origin/master/master.server.crt",
	)
}

func etcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func etcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerKey,
		"etc/origin/master/master.server.key",
	)
}

func etcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x9f\x5c\xc1\x1c\x46\x00\x00\x00")

func etcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleCrt,
		"etc/origin/master/named/console.crt",
	)
}

func etcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func etcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleKey,
		"etc/origin/master/named/console.key",
	)
}

func etcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func etcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterOpenshiftMasterKubeconfig,
		"etc/origin/master/openshift-master.kubeconfig",
	)
}

func etcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func etcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSchedulerJson,
		"etc/origin/master/scheduler.json",
	)
}

func etcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := etcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func etcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerCrt,
		"etc/origin/master/service-signer.crt",
	)
}

func etcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func etcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerKey,
		"etc/origin/master/service-signer.key",
	)
}

func etcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func etcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPrivateKey,
		"etc/origin/master/serviceaccounts.private.key",
	)
}

func etcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func etcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPublicKey,
		"etc/origin/master/serviceaccounts.public.key",
	)
}

func etcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func etcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSessionSecretsYaml,
		"etc/origin/master/session-secrets.yaml",
	)
}

func etcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := etcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeCaCrt,
		"etc/origin/node/ca.crt",
	)
}

func etcOriginNodeCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeClientCaCrt,
		"etc/origin/node/client-ca.crt",
	)
}

func etcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeNodeKubeconfig,
		"etc/origin/node/node.kubeconfig",
	)
}

func etcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := etcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x73\xd3\x4c\x0c\xbd\xfb\x57\xe8\xf0\xcd\xf4\xe4\xe4\x2b\x84\x8b\x67\x7a\x60\x80\x01\x0e\x94\x0c\x2d\xdc\x15\x5b\x8d\x35\x59\xaf\x96\x5d\xd9\xad\x09\xfd\xef\xcc\xda\x6b\xd3\x92\xa4\xc0\x0c\xa7\x44\x7a\xd2\xd3\xdb\xb7\xf2\xa2\xe3\x2f\xe4\x03\x8b\x2d\xa0\x3b\xcf\x76\x6c\xab\x02\xd6\x52\x65\x0d\x29\x56\xa8\x58\x64\x00\x68\xad\x28\x2a\x8b\x0d\x31\x04\x08\x65\x4d\x55\x6b\xc8\x2f\xd0\xb8\x1a\x17\xbb\x76\x43\xde\x92\x52\x58\xb0\x2c\x4b\xcf\xca\x25\x9a\xdc\x49\x55\xc0\xd9\x59\x06\x60\x70\x43\x26\x35\x8b\x23\x1b\x6a\xbe\xd1\xa1\x56\x1a\x27\x96\xac\x16\x80\x8e\x8f\xe1\x56\xbd\x98\xdc\x19\xb4\x54\xc0\x99\xfa\x96\x22\xa1\xc5\x86\x0a\x68\x30\x28\xf9\x7c\xec\x8c\xa9\xe0\xb0\xa4\x02\xa2\x9e\x3c\xf4\x41\xa9\xc9\x82\xa3\x32\x0e\x8e\x4c\xc8\x96\xfc\x20\x23\x07\xf4\xdb\x24\x28\x87\xa0\xe8\x35\xfd\x1f\x39\x53\x30\x69\xca\x21\xcf\x4b\xb1\x37\xbc\xbd\x58\x92\x96\x4b\xf1\xbc\x65\xbb\x1c\x6b\xd3\x4f\x2a\x58\xf4\xd8\x98\x6c\xbf\xcf\x81\x6f\xe0\xbf\xc5\x9b\x3b\xf5\xb8\xb8\xa6\xa0\xaf\x46\xf8\x53\x6b\x2d\xdb\xed\x67\x5b\x91\x8f\x69\xb8\xbf\x9f\x47\x18\xd9\x1a\xea\xc8\x5c\xac\x06\x02\x32\x81\x8e\xc2\xcf\x46\xd8\x56\x13\x5a\x4a\xd3\xa0\xad\xa6\xf3\xcc\x16\x0e\x31\x37\xb8\xa5\x02\xf6\x7b\x58\x24\x0d\xef\x63\x26\xc4\x28\x9a\xbb\x8e\xde\xc2\x77\xf8\xda\x8a\xce\xf3\x86\xa6\x75\x6b\xcc\x5a\x0c\x97\x7d\x01\x2f\xcd\x2d\xf6\x61\xc0\x0c\x77\x64\x29\x84\xb5\x97\x0d\x8d\x33\x01\x6a\x55\xf7\x96\x74\x0a\x01\x1c\x6a\x5d\x40\x4d\x68\xb4\xfe\xf6\x33\x2b\x5e\x0b\x58\xad\x9e\xcf\x99\xb8\x4c\xf1\x32\xdf\x5d\x5f\xaf\xaf\x52\x96\x2d\x2b\xa3\x79\x4d\x06\xfb\x2b\x2a\xc5\x56\xa1\x80\xd5\x8b\x84\x2a\x37\x24\xad\xce\xc0\xf9\xff\x03\x30\xee\xc4\x74\x65\x9e\xb0\xe2\xbf\x54\xb9\x8c\x4d\xfd\xbf\xd0\x9a\x24\x9d\xd4\x1a\xa8\x6c\x3d\x6b\x1f\xaf\x80\xee\x66\x3d\xce\x73\xc7\x86\xb6\x54\x15\x10\x57\x7d\x48\x77\x62\xda\x86\x3e\x48\x6b\x75\xde\xd8\x26\x46\xeb\x41\xfb\xe1\x42\x26\xb2\x47\xdf\xc8\xb8\x9c\x09\x89\xc7\xfc\x68\x4d\xff\x60\xc8\x49\xca\xd2\x48\x5b\x39\x2f\x1d\x57\x27\x98\x63\x41\xfe\x4b\xc5\x6f\x27\x74\xe8\x97\x86\x37\xd3\x94\x63\xc4\xf1\xf9\x39\xa1\xcd\xed\xf8\x58\xc7\x98\xae\x25\xe8\x25\xe9\xad\xf8\xdd\x3c\xde\x79\x96\xc1\x6f\x83\x21\x5c\x0e\x3d\xe3\xfb\x90\x5b\xa9\x28\x9f\x9e\xac\x6c\x72\x3b\x3d\x12\x91\x6a\x18\x9b\x3d\xdc\x96\x13\x8e\x1f\xf7\xfb\x4f\x48\x0e\x3d\x7e\xda\xe1\x93\x9c\x8f\x5d\x3d\x64\x4a\x96\x3e\xa9\x69\xf2\xf6\xc0\xd9\x1f\x01\x00\x00\xff\xff\xfe\x71\x85\x20\x2c\x06\x00\x00")

func etcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsApiserverYaml,
		"etc/origin/node/pods/apiserver.yaml",
	)
}

func etcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x41\x6f\xdb\x3a\x0c\xc7\xef\xfe\x14\x44\xf1\xae\xb6\xdf\x7b\xe8\x61\x30\xd0\x43\xd7\x14\xeb\xb0\xa5\x33\xd6\xb4\xd8\xad\x50\x64\xd6\x21\x22\x4b\x9e\x48\xbb\xc9\xb2\x7e\xf7\x41\xb6\xe3\x2e\xad\x53\x6c\xc8\x21\x16\x29\xfe\x48\xf1\x4f\x49\xd5\x74\x87\x9e\xc9\xd9\x0c\xda\xff\xa2\x35\xd9\x22\x83\xdc\x15\x51\x85\xa2\x0a\x25\x2a\x8b\x00\xac\xaa\x30\x03\xed\xac\x78\x67\x0c\x7a\x1e\x6c\x5c\x2b\x8d\x19\xac\x9b\x25\xc6\xbc\x65\xc1\x2a\x02\x30\x6a\x89\x86\x43\x18\x80\xab\xd1\xf2\x8a\x1e\x24\x21\x97\x6a\x57\xd5\xce\xa2\x95\x97\xa8\x57\xfb\x3a\x67\x5c\x1b\x65\x31\x83\x13\xf1\x0d\x9e\x44\x5c\xa3\x0e\xd0\xe0\x55\x64\xd1\x77\x29\x62\x50\xbe\x1c\x92\xc5\xc0\xa2\xbc\x0c\xdf\x95\x62\x41\x3f\x2c\x5e\xe6\x8b\x21\x8e\xb5\xb3\x0f\x54\x9e\xa5\x28\x3a\x75\x9e\x4a\xb2\x69\x1f\x33\xfc\x0d\x1b\x92\xad\xaa\xcc\x18\x64\x88\x05\xed\xd9\x4a\xa4\xe6\x2c\x4d\xff\x4d\xba\x5f\xf6\xee\xf4\xf4\x34\xda\xed\x62\xa0\x07\xf8\x27\xb9\xdc\x88\x57\xc9\x02\x59\x2e\x7a\xc4\xd7\xc6\x5a\xb2\xe5\xad\x2d\xd0\x07\x33\x3c\x3d\x3d\x13\x5d\x69\xb0\x45\x73\xd6\x03\xd0\x30\x4e\xba\xff\xef\xdd\xb6\xd8\x7b\xb5\xab\x2a\x65\x8b\xfd\xd9\xc7\x16\x76\x6b\xb4\xed\xde\xd1\x8b\xf7\xe9\xf6\xfd\xe5\xfd\xfc\xfc\xdb\x7d\x3e\xbb\xbf\xfb\xf2\xf9\xa6\x73\x02\xb4\xca\x34\x98\xc1\x6e\x07\xc9\x0c\x3d\xb5\x58\x24\x73\xb5\x99\x29\x51\x33\xe2\x35\xe7\xe8\xef\xe6\x90\x5c\xec\x7b\x7e\x83\xbe\x25\x8d\xf0\x13\xbe\x37\x4e\xc6\x42\xa9\x52\xe5\x40\x19\x4e\xfc\x31\x58\xb8\x0b\xf4\xce\xe4\x41\xc9\xc9\xa0\xbc\x31\x26\x77\x86\xf4\x36\x83\x73\xf3\xa8\xb6\xbd\x3e\x86\x5a\xb4\xc8\x9c\x7b\xb7\xc4\x6c\xa8\x35\x34\xfd\x03\xca\x7e\x09\x50\x2b\x59\x65\xb0\x42\x65\x64\xf5\xe3\xd9\xea\xbc\x64\xd0\x29\xb2\x37\xb1\x5e\x61\x68\xc2\xd5\x62\x91\xf7\x27\x9f\x9a\x68\x00\x46\xdd\x78\x92\x6d\x28\x1b\x37\x63\xa6\xda\x53\x4b\x06\x4b\x2c\x32\x08\xc3\xd8\x99\x5b\x67\x9a\x0a\xe7\xae\xb1\x32\xce\x5f\x15\x56\x79\x57\xd5\xc4\x58\x0d\xb4\x3e\xf5\xc1\x8c\xbd\x1d\xae\x8d\x6b\x8a\xda\xbb\x96\x8a\x63\x94\xb0\x23\xde\x6f\x39\x42\x7b\xbe\x38\xa9\xc7\x92\x58\x3c\x21\x27\xc5\x21\x90\xa9\xb4\x4a\x1a\x8f\x31\x55\xa1\x91\x13\xac\x86\x7d\x6a\x68\x89\x1b\xd4\x69\xb8\xf9\xde\xa2\x20\x77\x9f\x06\x25\xae\x4d\x53\x92\xe5\x81\xda\x07\x7a\x57\xab\x52\x49\xf7\xc8\x5c\x39\x96\x85\x1b\x27\xea\x20\xfb\x6b\xc6\xca\xb1\x5c\xa3\x3c\x3a\xbf\x1e\x7b\x5f\x7b\x72\x9d\x4a\x46\x31\x5f\xf7\x65\x77\x8f\x4f\x6c\x5d\x81\xb1\xf6\x24\xa4\x55\xb8\xb3\xbd\x46\xc3\x43\x11\x50\xdd\x11\xa2\xdf\xa7\xe7\x98\x4e\xd3\x2a\xfd\x09\xe5\x40\xae\x09\xd6\x4b\xad\xde\x64\x1e\x11\x2d\x7a\x53\xb1\xa3\xc4\xbf\x90\x6e\x5a\x90\x5f\x01\x00\x00\xff\xff\x03\xf2\x13\xf6\x2e\x06\x00\x00")

func etcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsControllersYaml,
		"etc/origin/node/pods/controllers.yaml",
	)
}

func etcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x6f\x22\x39\x10\xbd\xf3\x2b\x2c\x2e\x39\xb9\x11\xc9\x6e\x76\xe3\x5b\x04\x91\x36\xd2\x86\x41\x4a\x34\xd7\x51\x61\x57\x68\x0b\x77\xb9\xc7\xae\xee\x04\x25\xfc\xf7\x91\xdd\xdd\xd0\xf9\xe0\x00\xd8\xaf\xaa\x9e\xeb\x3d\x97\x81\xda\xfe\xc4\x10\xad\x27\x25\xda\xf9\x64\x67\xc9\x28\xb1\xf6\x66\x52\x21\x83\x01\x06\x35\x11\x02\x88\x3c\x03\x5b\x4f\x31\x6d\x85\x88\xba\x44\xd3\x38\x0c\x05\xb8\xba\x84\x62\xd7\x6c\x30\x10\x32\xc6\xc2\xfa\x99\x0e\x96\xad\x06\x27\x6b\x6f\x94\xb8\xb8\x98\x08\xe1\x60\x83\xae\x2f\xf6\x35\x52\x2c\xed\x33\xe7\x5c\x5f\xd5\x9e\x90\x58\x09\x64\x6d\xbe\x4b\x20\x0e\xde\xc9\xda\x01\xa1\x12\x17\x1c\x1a\x4c\x8c\x04\x15\x2a\x51\x41\x64\x0c\xb2\x2f\x4d\x58\xac\x41\xa3\x12\xa9\x23\x19\xf7\x91\xb1\x9a\xc4\x1a\x75\x3a\x3a\x51\x81\x25\x0c\xb9\x11\x29\x20\x6c\xfb\x96\xa4\x78\xcf\xbf\x42\x44\x64\x21\xa1\xdf\x14\x62\x86\xac\xd3\xc7\xe4\xaf\x42\x7b\x7a\xee\x63\xf8\x8a\xfa\xd4\xb2\xf6\x55\x05\x64\x06\xb6\xd9\xc6\xd2\x2c\x96\xfd\x4e\xea\xbc\x40\x6a\x87\x78\xd7\xfc\xdd\xd3\x62\xb9\x78\xfa\xff\xd7\xed\xfa\xbe\x27\x6d\xc1\x35\xa8\xc4\xf4\x6a\x9a\x01\x5b\xc1\x16\x95\x78\x7b\x13\xc5\xc2\xd3\xb3\xdd\x16\xf7\x09\x89\xc5\x43\x96\x7d\xc7\xda\x88\x77\xf1\xbb\xf1\x8c\xe2\x70\x38\x95\xac\x1b\xe7\xd6\xde\x59\xbd\x57\xe2\xd6\xbd\xc0\x3e\xe6\x98\xb3\x2d\x12\xc6\xb8\x0e\x7e\x83\x6a\xa4\x63\x58\x7f\xd2\xd1\xf5\x9a\x34\x6a\x76\x23\x44\x4a\x0d\x1a\x03\x8f\xa0\x93\x4f\x1a\x0a\xfd\x21\x24\xe5\xd9\xdc\x1a\x31\x7c\xc9\xde\xe1\xfe\x7c\xf2\xc7\xa0\x94\x48\xa6\xf6\x96\x38\x8e\xd0\x92\xb9\x8e\x6a\x36\x4b\xb6\xdd\xbd\x72\x80\xe2\x3f\x1f\x39\x59\x2e\x0e\x07\x75\x79\xf5\xcf\xcd\x58\x5d\x4f\x30\xae\x47\x70\x5c\xf6\x80\x25\xcb\x16\xdc\x12\x1d\xec\x1f\x51\x7b\x32\x51\x89\xbf\xfe\xce\xd1\xee\x16\x8f\x33\x10\x51\x37\xc1\xf2\x7e\xe1\x89\xf1\x95\x07\x0f\xeb\x60\x5b\xeb\x70\x8b\x46\x89\x34\xbc\x19\x6e\xbd\x6b\x2a\x7c\xf0\x0d\xf1\x71\x04\xab\xb4\x5b\x03\x97\xea\xa4\xba\xe7\x38\x9d\x24\x75\x1e\x84\x1e\x0f\x08\xe6\x07\xb9\xfd\x88\xf9\x23\x4f\x0b\x61\xe6\xec\xe6\x0c\x57\x7a\xdf\x19\x7d\xf1\x61\x67\x69\xbb\xb4\xe1\x6b\x4d\xe9\x23\xaf\x90\x53\xca\xf1\x18\x43\x71\x98\xaf\xe9\xca\x13\x4e\x3b\xac\x1b\x52\x75\x34\x27\x62\x68\xfb\xd7\xd6\xb5\x36\xbf\xfe\xb7\xb8\xbe\x2a\xe6\x97\x37\xc5\xfc\xba\x37\x0d\x82\x2e\x71\x94\x73\xba\xb6\xe5\xea\x71\x74\x73\x93\x6c\xa5\xcf\x0e\x3b\x88\x71\x95\x75\x74\x4f\x5c\x92\x37\x28\x87\xff\x9d\xc9\xe0\x6f\xff\xce\x93\x82\xec\xc7\x70\x23\xdf\x78\xfc\x9d\xc3\x67\x2b\xbf\xb8\xfa\xd9\xd3\x3f\x01\x00\x00\xff\xff\xd0\x60\x41\x6b\x56\x05\x00\x00")

func etcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsEtcdYaml,
		"etc/origin/node/pods/etcd.yaml",
	)
}

func etcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsSyncYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x3d\x4e\x03\x31\x10\x85\xfb\x3d\xc5\x5c\x60\xb3\xa2\x75\x87\x52\x51\x00\x2b\x21\xd1\x46\xc6\x1e\x36\xa3\xd8\x9e\xc5\x33\xde\x60\x85\xdc\x1d\xed\x0f\x91\xd2\x50\xbe\xe7\x4f\xfe\x9e\x6d\x47\x7a\xc7\x2c\xc4\xc9\xc0\xf4\xd0\x9c\x28\x79\x03\x3d\xfb\x26\xa2\x5a\x6f\xd5\x9a\x06\x20\xd9\x88\x06\xa4\x26\xb7\x05\x19\xad\x43\x03\xa7\xf2\x81\xad\x54\x51\x8c\x8d\x8c\xe8\x66\xd6\x71\x52\x4b\x09\xb3\xcc\xa9\x05\x8a\x76\x40\x03\x97\x0b\xec\xf6\x9c\x3e\x69\xd8\x3d\xcd\x8d\xec\xde\x6a\x72\xf0\x03\x5f\x85\x15\xe1\x7a\x6d\x00\x60\x85\xfb\x12\x42\xcf\x81\x5c\x35\xf0\x18\xce\xb6\xca\x72\x76\x37\x02\x40\xd0\x95\x4c\x5a\xf7\x9c\x14\xbf\xd5\x2c\x25\xc0\x98\x69\xa2\x80\x03\x7a\x03\x9a\x0b\x2e\xf5\xc4\xa1\x44\x7c\xe6\x92\x54\x56\xb0\x85\x38\xa7\xde\xea\xd1\x40\x77\x98\x1f\xda\x1d\xb8\xe8\x76\xcb\xea\x8a\x56\x14\x73\xeb\x02\x17\xdf\x8e\x99\x27\xf2\x98\x37\x22\xa3\xf5\xaf\x29\xd4\x9b\xe5\xc8\xa2\x2f\xa8\x67\xce\xa7\x5b\xb7\x7a\xb7\x8f\x98\x81\xc5\xf7\xb7\x74\x75\xa3\xba\x8e\x33\x0d\x94\xba\x45\x74\xe7\xf9\x6f\xc7\x6f\x00\x00\x00\xff\xff\xca\xef\xb1\x1f\xba\x01\x00\x00")

func etcOriginNodePodsSyncYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsSyncYaml,
		"etc/origin/node/pods/sync.yaml",
	)
}

func etcOriginNodePodsSyncYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsSyncYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/sync.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x6d\x73\xdb\x38\x0e\xfe\x5c\xfe\x0a\x54\xce\x5e\xda\x4c\x29\x25\x69\xae\xd7\x73\xeb\xde\xe4\xc5\xed\x66\x2e\xdb\x64\x92\xec\x76\x6e\xba\x9d\x0c\x2d\x42\x16\x6b\x89\xd4\x92\x90\x53\x37\xcd\x7f\xbf\x21\x25\x39\xb6\xe3\xa6\x9d\xd9\x7c\xb0\x15\x12\x04\x40\x00\xcf\x03\xc8\xbd\xc7\xc9\x48\xe9\x64\x24\x5c\x0e\x1c\xbf\x30\xd6\x83\xcb\xd3\xa3\xd3\x3e\x24\x48\x69\x22\xb5\x2b\x85\xfb\x2b\x96\x89\xb1\x6a\xac\x34\xaf\x2b\x47\x16\x45\xc9\xa5\x76\x71\x6a\x74\x06\xca\x41\x5a\x5b\x8b\x9a\x8a\x19\xe4\xc2\xca\xd4\x48\x94\xaf\x40\x11\xeb\x41\x65\xcd\x48\x8c\x8a\x19\xb8\xdc\xd4\x85\xd4\x9b\x04\x23\x64\xec\x62\x78\xfe\xc7\xf1\xe1\xf0\xea\xf2\x7f\x67\xc3\x41\xa3\x99\xa9\x0c\x3e\x02\xcf\x20\x0a\x86\xdd\xcc\x79\xed\x6a\x9c\x08\x32\xa5\x4a\xb9\xa9\x50\xbb\x5c\x65\xc4\xb5\x91\x18\xc1\xa7\x57\x40\x39\x6a\x06\x00\xb0\xa4\x6e\x55\x9e\x65\xca\x5f\xca\x62\x69\xa6\x08\x16\xc7\xca\x91\x9d\x41\x8a\x96\x54\xa6\x52\x41\x08\xce\x64\x54\x28\x3d\x81\xcc\x9a\x12\xa4\x49\x27\x68\x59\xad\xc3\x52\x13\x86\xb0\x94\xf8\x33\x2e\x96\x49\xa7\x24\x16\x69\x8a\xce\xc5\x16\x65\x2e\x28\x4e\x4d\x99\x34\x8f\x3c\x15\x71\x6a\x89\xf9\x4b\x3d\x86\xb1\xc5\x0a\x92\xa9\xb0\x49\xa1\x46\xad\xae\x46\x6f\xe6\x48\x8c\xe6\x17\x71\x33\x47\x58\xa6\x54\x80\x23\x53\xb5\x7e\xc4\x0e\xed\x54\xa5\xc8\x00\xca\x49\xe6\xe2\x2f\x99\xf3\x51\x4a\x24\x4e\x13\xa9\xdc\x24\x11\x5f\x6b\x8b\x89\x45\x67\x6a\x9b\x22\xaf\x84\xa5\x1d\x06\x80\x69\x6e\x60\xf3\x61\x31\xb8\xe7\x15\x78\xf5\x30\xb6\xd5\x5f\xb5\x21\x01\xb0\x0d\xdb\x9b\xf0\xe6\xcd\x9d\xb3\xde\x0d\x53\x6b\x5a\x3d\xc9\x00\x2c\x3a\x32\x16\x53\xa3\x81\x9f\xaf\xd9\x4f\x05\xc1\x9b\xc5\x70\x4a\x81\xa5\xd1\xf1\x67\x67\x34\xbc\x7e\xbd\x39\x3c\x7d\xbb\xc9\x6e\x18\x40\x54\x98\x31\x97\x56\x4d\xd1\x46\x7d\x88\x3e\x9b\xda\x6a\x51\xc8\x88\xdd\xb2\xe1\xe9\xdb\x95\x40\x09\x4b\xab\x91\x6a\x12\x9e\xa9\x02\xdb\xb2\x83\x11\x42\x62\x8d\xa1\x24\xee\x32\x19\x6a\x2b\x98\x7e\x06\xa3\x9a\x40\xa4\x54\x8b\xa2\x98\x81\x46\x94\xa0\x08\x94\x66\xbd\xbb\x4b\x34\x35\x0a\x94\x0b\x3d\x71\x40\x06\x72\xa2\xca\xf5\x93\x64\xac\x28\xaf\x47\x21\xf5\x93\x7a\x84\x56\x23\xa1\x5b\x7c\x54\xce\xd5\xe8\x92\xbd\x7f\xee\xbd\xfc\x17\x3b\x3a\xdb\xbf\xfc\x75\xb0\xa2\xb5\x73\x8a\x95\x13\xa9\x2c\xf0\x0a\x36\x82\x1c\x1b\x09\x87\x2f\xf6\x80\x4b\x78\xfd\xfa\x35\xdc\xdc\x40\x7c\xd8\xb8\x7d\x5c\x8a\x31\xba\xe6\xeb\xac\x2e\x8a\x0b\x4c\x2d\x12\x7c\x83\x83\x70\x62\xa8\x3d\x04\xe1\xf6\x16\xde\x6c\xdc\x04\x55\xb7\x8b\x17\x66\x69\x5e\x1a\x09\xdb\x2f\xb6\xb7\x61\xed\xfe\x9c\x02\x52\xa3\x9d\x92\x68\x21\x13\x29\xf9\xcb\xd3\xbd\xba\x73\xa9\x53\x3b\x49\x51\xeb\xed\xef\x11\x81\x67\x01\x61\x49\x91\x32\xfa\x81\xe3\xaf\x16\xac\xd5\x54\x5b\x04\x47\x56\x10\x8e\x67\x90\x19\xeb\x8b\x4b\x7d\x45\x07\x2a\x63\xbd\x90\x23\x94\xeb\xc0\x85\x94\xca\x75\xd0\x9a\x43\xe7\x01\xff\xbf\x7d\x03\xb2\x35\x7e\x17\x3b\x0b\xa2\x2b\x06\x1b\xd4\x48\xcc\x44\x5d\x90\xfb\x29\xd4\xf8\x73\xdf\xc7\x4c\xd8\xf5\x65\x1c\x3c\x89\x0e\x4e\x4f\x2f\x2f\x2e\xcf\xf7\xcf\xae\x0e\x4f\xdf\xbf\x3d\x7e\x77\xf5\x7e\xff\xb7\xe1\xc0\xf3\x20\x6f\xf2\xc6\x4b\xe1\x08\x6d\xd4\x19\xbd\x63\xcf\x8d\x9b\x45\x72\xbc\x0d\xe4\xc9\xd8\xcd\x0d\x07\x95\xc1\x46\x3c\xfc\x42\x56\xc4\x97\xe8\xa8\x2d\xad\xf3\x5a\x6b\xa5\xc7\xbf\x6b\x89\xd6\x2f\xc3\xed\x2d\x73\x28\x81\x2b\xe0\x08\x91\xeb\x1d\x0d\x0f\x7e\x7f\x77\x75\x72\xfa\xee\x64\xf8\xc7\xf0\x64\xb0\xbb\xba\xb0\xd7\x8b\xe0\x67\x7c\xf0\x2e\xa0\x96\x5e\x3f\xf3\x09\x96\xce\x63\x0e\x28\xad\x9e\xbd\xdc\xdb\xdb\x7b\x05\xd2\xb0\x47\x95\x35\x64\x06\x1b\x37\xd2\xd1\x2f\xbf\x3c\xdb\xba\x65\x8f\x2a\x63\xa9\x59\xe8\xf5\xb6\x9e\xdd\xb2\x47\xaa\x22\x31\x2a\xd0\x01\xdf\x87\xd3\x8b\xab\xb7\xc7\xe7\xc3\x0f\xfb\x27\x27\x57\xfb\x27\x27\xa7\x1f\x02\x98\x82\x12\xe0\xa5\x27\x0b\x42\xe0\xbc\xf9\x7e\x3f\xfc\xe0\x17\xbb\x6d\x2e\xbd\x6a\xd8\x08\x9f\xfc\x33\xec\x1f\x1e\x0e\xcf\x2e\x99\x34\x1a\x19\xeb\x8c\x70\x27\xa6\x08\xab\x31\xee\x76\x19\xb3\x25\x70\x9b\x35\xf7\xf7\x39\x4c\xb6\x9a\xe7\x16\xe8\x4d\x96\x92\x2d\x76\x07\xf5\xc5\xed\xb4\x30\xb5\xac\xac\x99\x7a\x14\xb0\x3b\xba\x5c\xb7\xdd\xd4\x64\xd3\x81\xe7\xdc\x79\x03\xf1\x11\x7a\xde\x94\xf1\x6f\xc1\xd4\xa1\x3f\x72\xd6\x1e\xf1\x19\x0e\x14\x42\x42\x69\xb4\x17\x0d\x5b\xc2\x37\xb8\x20\xab\xf4\xd8\x67\xc2\xd3\x2b\xeb\xc1\x75\x8e\xba\xa1\x56\xbf\xee\xd3\x05\xd7\x42\x8c\x51\x13\x08\x2d\x41\x23\x5d\x1b\x3b\x81\x9a\x54\xa1\x48\xa1\x83\xb1\xf1\xd0\xd4\x64\xc0\x8a\x14\x3d\x92\x65\xc0\x7b\xcc\x7a\xbe\xce\xba\xc3\xb6\xd6\x0e\x46\x98\x19\x8b\x20\xb5\xf3\x8c\x31\xd1\xe6\x5a\x7b\x42\xa5\x1c\x5b\x4b\x18\xea\xa2\xae\xe0\x5a\x51\x0e\x58\x56\x34\xf3\x5c\xa0\xf4\x98\x5d\xe7\x9e\xd4\x3f\x7e\x84\x8d\x27\xb9\x71\xa4\x45\x89\xc0\xe5\x53\x18\x0c\x20\x8a\xe0\xd3\x27\x5f\x35\xe0\x0a\xc4\x0a\x76\xfc\xb3\xcf\x5d\x61\xc6\x63\xb4\xc0\x09\x9a\xf0\xf3\x70\xb1\xba\x8a\x5d\x0e\x91\x6d\xca\x1d\xda\x35\xef\x79\x13\x9d\xa8\xb5\xf5\xb8\x6d\x2e\x50\xd5\x45\xb1\x86\x83\x2f\xda\x83\xb7\xb7\xa1\x62\x01\x1e\x34\x77\x2d\x54\x08\xa9\x2f\x78\xe5\x15\x34\x6a\xc9\x80\x0f\x68\xe4\x5b\x5b\xe3\xfc\x76\x53\x78\xad\x6d\x5b\x6b\xe0\xbc\xb2\x6a\xaa\x0a\x1c\x7b\x34\x72\x5f\x69\xbc\x4b\x84\x8f\x05\xf0\x69\x28\xa6\x7e\xf8\xf8\xfa\xa0\xab\x0f\xc7\x24\x53\x5a\xb9\x1c\x25\x7c\x37\x38\x60\xd3\xfe\xc6\x7f\x22\xc6\xea\x4a\x0a\x42\x9e\x0a\x4e\xb6\x76\xd4\xd0\xd5\xa6\x4f\x8b\xef\xc5\x68\x61\xe7\xc5\xcb\xf8\xc5\xf3\x78\x67\xf7\xdf\xf1\xce\x8b\xcd\xe5\x7a\xf6\xd9\x0e\x03\x49\x31\x0d\x75\xcc\xe6\x44\x63\x03\xd3\x3c\x81\xad\x46\x4b\x1f\x9e\xc6\x5b\xbd\x3f\x77\xba\x9e\x7b\x97\xfc\xa7\x1d\xd9\x2c\x03\xec\x6e\x56\x6c\x16\x62\xdf\x8f\x1b\xb0\xfe\x7d\x1b\xc1\x6d\xff\xb1\xa8\xb5\x07\xbf\xee\x1f\xfe\xd7\x77\xcc\x6a\x06\x2b\x9b\x3e\xbd\x23\x63\xc8\xf7\xb3\x6a\x71\xdd\x99\xa6\xa7\xce\xdd\x6d\xc7\x99\x00\x83\xda\x3b\x1a\x46\x0e\x04\x37\xd3\x29\xeb\x41\x33\x2f\x39\x24\xb8\x56\x45\x01\xda\x10\x64\x42\x15\x01\x93\x7e\xd5\x8b\x36\x17\x6e\x54\x14\x62\x84\x85\x83\xd4\x58\x8b\x29\x15\xb3\x98\xa5\xd5\x0f\xaf\x72\x5f\x60\x9d\xef\xf7\x5a\xc8\xb1\x3b\xc7\xd4\x4c\xd1\xce\x7e\x58\x5f\x73\x62\xb1\xdd\x09\xa3\x17\x00\xfd\x34\x62\x3d\x70\xe4\x51\x00\xe3\xf6\x56\x23\x91\x4e\xea\x2a\xd0\xeb\x79\xb6\xdc\x26\x93\x2d\x46\x58\x56\x07\x22\x9d\x1c\x29\x3b\x58\xde\x6b\xcf\x35\x6c\xbb\xb1\x20\xf7\x93\xe8\x1e\x52\x2a\x0f\x82\x8e\x16\xe0\x73\x7c\xb6\xec\xb2\x04\xd0\xfb\x98\xfc\x93\x41\x87\xcb\xe5\x12\xed\xdf\x5f\x5a\x27\xbc\x4c\xf9\xfd\xe4\x4a\x0a\x12\xc9\x95\xa9\xe7\xaa\x17\x2f\xd5\x4f\x4c\x4d\xfd\xaf\x61\xeb\x07\x77\x69\x8e\x8f\x0a\x33\xf2\x21\x1f\x78\xe9\x26\x8f\x8d\xc4\x41\x61\x46\xef\x3d\xb9\x76\x92\x12\x1d\x29\x2d\x3c\xa7\x0f\xbc\x95\x36\xb2\xb1\x1c\x41\x24\xcd\xb5\x2e\x8c\x90\xd1\xc3\x69\x6f\x4e\x40\x27\x8d\xd2\xe3\x22\x82\x8d\x27\x85\x5b\xba\xc5\x53\xd6\xe5\x7f\xb7\x1b\x8f\x7e\xc0\xe1\x41\x28\x10\x95\x16\x95\xcb\x0d\xfd\x2c\x79\x37\x4d\xd2\x07\xe6\xef\xa7\xd7\xd7\x5b\x7f\xfe\x34\xdf\x5a\x2c\xc7\xfe\xf2\x7f\x4d\xa2\x38\xc2\xf0\xf2\xf0\xe8\xf0\xf2\xe4\x6a\xff\xec\x78\x10\x3d\x8f\xbe\x93\xbf\x25\x67\x83\x8c\xd7\x12\x5e\x82\xda\x6b\x77\xe1\x5a\x0a\xe7\x42\xa6\x82\x39\xee\x4b\x88\x7b\x3c\x2c\x43\x45\xe3\x75\x2b\x10\xba\xea\x02\x1e\xdb\x65\xa5\x15\x29\x51\xf0\xb4\xa8\x43\xb9\x46\x6d\x2a\xb6\xc3\xdf\xa0\x23\xce\xa5\xd5\xfe\xee\xf3\x97\xdb\xcf\x16\x97\x76\xd6\x0a\xee\xdc\x17\xdc\x5d\x2b\xb8\x1b\x04\xa3\xf5\x2e\x71\x32\x13\xd4\x21\x2c\x3c\x33\x96\x87\x11\x69\x45\x54\xc8\xa9\x7f\xf1\x77\xc8\x2b\x44\xcb\x6b\x5b\x38\x58\xc3\xf9\xc1\x0c\x63\xe5\xf4\x7e\x94\xfc\x4c\xb7\xb4\x36\x9f\xfa\x56\x25\xbb\x8d\x25\xe2\x59\x9a\xf8\x57\xd4\xff\x4c\x9d\x63\xa8\xcc\x68\x69\x7e\xee\x75\xec\xef\xf5\x96\x25\x6a\x8f\xae\xbb\x26\xe8\xfb\xb6\x35\x05\xaf\x0a\xa1\x11\x2a\x6b\xc2\xab\xb1\xd1\x90\x29\xeb\x28\xf4\x26\x46\xb5\x46\xc9\x85\x2c\xef\xf6\xd7\x9f\xf7\xe8\xd4\x86\xb0\x0f\xeb\xc6\x7a\x48\xad\x70\x39\x14\xc6\x54\x0e\x6a\x4d\xaa\xe8\x3a\x92\x72\x50\x57\xec\xee\xcd\x1d\xb5\x9f\x99\xd7\x2a\x99\xbf\xc8\xaf\xbe\xe7\x3f\x24\x0c\xff\xf0\x9e\x49\xe5\xc4\xa8\x08\xcd\xc5\xcd\x5c\x61\xc6\xe0\x94\x4e\xc3\x50\x59\x0a\xed\x07\x2e\xf4\x1d\x87\x72\x2f\x42\xb9\x35\xf5\x38\x87\xee\x07\x86\x05\x7b\x8d\x1e\xec\xb4\xac\xf5\xc8\x54\xf7\xb6\x17\xe6\xfa\xe6\xe7\x06\xdf\x31\x57\xbb\x6e\x3b\xa4\x08\x59\x2a\xbd\xd4\x78\xef\x8e\x24\x5d\x97\xfd\x7f\x00\x00\x00\xff\xff\xa8\xa9\x71\xb0\x9e\x13\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x7b\x6f\xdb\x38\x12\xff\x9f\x9f\x62\x6a\x07\x97\xbb\xe2\x24\x25\xbd\x5c\xb6\x9b\x26\x01\xf2\x70\xbb\x45\x1f\x0e\x92\xb4\x8b\x62\xb1\x08\x28\x72\x64\xb1\xa6\x48\x75\x38\x72\xeb\x75\xfd\xdd\x17\x94\xfc\x6a\x92\x6d\xba\xd8\xbf\x2c\x93\x33\xbf\xf9\xcd\x9b\xfd\x47\x59\x6e\x5c\x96\xcb\x50\x42\x82\x5f\x84\xe8\xc3\xf5\xf0\x7c\x78\x00\x19\xb2\xca\xb4\x0b\x95\x0c\x9f\x52\x9d\x79\x32\x23\xe3\x92\xa6\x0e\x4c\x28\xab\x44\xbb\x90\x2a\xef\x0a\x30\x01\x54\x43\x84\x8e\xed\x14\x4a\x49\x5a\x79\x8d\xfa\x19\x18\x16\x7d\xa8\xc9\xe7\x32\xb7\x53\x08\xa5\x6f\xac\x76\xdb\x0c\x39\x0a\x71\x35\xb8\x7c\xff\xf2\x6c\x70\x73\xfd\xe1\x62\x70\xd4\x21\x0b\x53\xc0\x6f\x90\x14\xd0\x6b\x0d\x87\x69\x88\xe8\x66\x94\x49\xf6\x95\x51\x89\xaf\xd1\x85\xd2\x14\x9c\x38\xaf\xb1\x07\xbf\x3f\x03\x2e\xd1\x09\x00\x80\x6f\xe0\x6e\xcb\x8b\xc2\x44\xa7\x08\x2b\x3f\x41\x20\x1c\x99\xc0\x34\x05\x85\xc4\xa6\x30\x4a\x32\x42\xf0\x05\x5b\xe3\xc6\x50\x90\xaf\x40\x7b\x35\x46\x12\x8d\x6b\x8f\xba\x30\xb4\x47\x59\xd4\x09\xa9\xce\x96\x20\xa9\x54\x0a\x43\x48\x09\x75\x29\x39\x55\xbe\xca\xba\xcf\x44\xc9\x54\x11\x8b\xe8\xd4\x23\x18\x11\xd6\x90\x4d\x24\x65\xd6\xe4\x0b\xac\x0e\xb7\x08\x2c\xf3\x95\x23\x61\x1a\x18\x2b\xc5\x16\x02\xfb\x7a\xc1\x23\x0d\x48\x13\xa3\x50\x00\x54\xe3\x22\xa4\x5f\x8a\x10\xa3\x94\x69\x9c\x64\xda\x84\x71\x26\xff\x68\x08\x33\xc2\xe0\x1b\x52\x98\xd4\x92\x78\x57\x00\xa0\x2a\x3d\x6c\x7f\x5f\x0c\xee\xb0\x82\x08\x0f\x23\xaa\x3f\x35\x9e\x25\xc0\x0e\xec\x6c\xc3\xf1\xf1\x9a\x6c\xa4\xe1\x1b\xc7\xb7\x35\x05\x00\x61\x60\x4f\xa8\xbc\x83\xe4\xf2\xce\xfd\x6c\x96\x80\x29\x00\x3f\x41\x3a\xf8\xc2\x24\xd3\x4b\x6f\x11\x7a\xc6\x15\x24\x7b\x30\x9f\x0b\x00\x25\x19\x8e\x37\xe3\xad\x25\x56\xde\xa5\x1f\x83\x77\x70\x78\xb8\x3d\x18\x3e\xdf\x16\x33\x01\xd0\xb3\x7e\x94\x68\x32\x13\xa4\xde\x01\xf4\x3e\xfa\x86\x9c\xb4\xba\x27\xe6\x62\x30\x7c\xde\x9a\x42\xa7\x3b\xd0\xcd\xa0\x4a\xe2\xdb\x51\xed\x8a\xa3\x30\x16\x17\x25\x0a\x39\x42\x46\xde\x73\x96\x2e\xb3\xde\xd6\x61\xcb\xe2\xbf\x90\x37\x0c\x52\x71\x23\xad\x9d\x82\x43\xd4\x60\x18\x8c\x13\xfd\xb5\xc3\x5d\x3d\x03\x97\xd2\x8d\x03\xb0\x87\x92\xb9\x0e\x07\x59\x36\x32\x5c\x36\x79\x5b\x26\xe3\x26\x47\x72\xc8\x18\x36\x3f\x4d\x08\x0d\x86\x6c\xef\xff\x7b\x4f\x7f\x12\xe7\x17\x27\xd7\xbf\x1c\xdd\x42\x5d\x92\x12\xd5\x58\x1b\x82\xa4\x86\xad\x56\x4e\xe4\x32\xe0\xfe\x1e\x24\x1a\x0e\x0f\x0f\x61\x36\x83\xf4\xac\xa3\xfd\xb2\x92\x23\x0c\xdd\xcf\x45\x63\xed\x15\x2a\x42\x86\xaf\x70\xda\x6a\x0c\x5c\x6c\x57\x98\xcf\xe1\x78\x6b\xd6\x42\xcd\x37\x1d\x16\xaa\xac\xbc\x86\x9d\xfd\x9d\x1d\xb8\xf7\x5e\x74\x75\x76\x3a\x1c\x5e\x5f\x5d\x5f\x9e\x5c\xdc\x9c\x0d\xdf\x3e\x7f\xf9\xe2\xe6\xed\xc9\x9b\xc1\x51\xec\xd4\xa4\x93\x4e\x22\xa5\x8d\xc4\xcf\xe7\xab\xba\x5a\xb7\xfa\xd6\x6c\xb3\x93\xe7\x6d\xa7\x8b\x65\xe5\x6c\x2d\xd4\xaf\x31\xf0\xc2\xb7\xcb\xc6\x39\xe3\x46\xef\x9c\x46\x8a\xc7\x31\xe3\x01\x35\x24\x06\x12\x84\x5e\xe8\x9f\x0f\x4e\xdf\xbd\xb8\x79\x3d\x7c\xf1\x7a\xf0\x7e\xf0\xfa\xe8\xc9\xed\x83\xbd\x7e\x0f\x7e\x84\xc3\x46\x45\x09\xaa\x20\xa1\xa2\x53\x43\x56\x3a\x7b\xdc\x7d\x2f\x12\x54\xc9\xc0\x48\xd9\x63\x71\x37\x25\xdf\x44\xfc\xdf\x1f\x64\x65\xdf\x48\x0a\xa5\xb4\xab\x64\xbd\xf5\x1a\x4f\xbd\xe7\xc0\x24\xeb\x57\x4d\x8e\x1d\xa9\xff\xb4\xf9\xd9\xb4\x12\x59\x65\xf9\x52\x32\x1d\xaf\x44\x1f\xb2\x7a\x86\xc4\x27\xe1\x74\xca\x18\x56\x56\xcf\xd6\xa3\x30\x7c\x4b\xa1\xbd\xfa\x0b\xeb\x6d\x72\x57\x14\x6a\xa4\x76\xe2\x3d\x60\xfe\x82\xcc\x44\x32\xbe\xc2\xe9\xdf\x20\xf1\x0a\xa7\x3f\xcc\x61\x8c\xd3\xcd\x9a\xfd\x31\x8d\xbb\x62\xf7\x86\xf6\x1f\xc7\xf6\x4c\x7e\x2f\xa0\x8b\x9d\xa1\xea\xbb\x74\xba\xab\xee\xbc\x1e\x9b\x4c\xc9\x84\xa9\x09\x9c\x75\xd3\x3c\x93\x4e\x95\x9e\x42\xb6\x5e\x92\x0b\xb0\xa6\xd6\x92\x31\x59\xca\x2f\xdb\xd5\xc9\x0a\xe3\x04\x44\x82\xdd\xfd\xa7\xe9\xfe\xff\xd2\xdd\x27\x3f\xa7\xbb\xfb\xdb\xf7\xd0\x8a\x2b\xc3\x4e\xda\x5d\xbf\x9e\x3a\x9b\x52\xca\xfa\x46\xd7\xe4\x27\x46\x23\x09\xb1\x9e\xe2\xf7\xdd\x77\x7b\xa8\x7b\x39\xac\x46\xfa\x0c\xd2\x73\x8c\xe3\x5c\xa7\xbf\x7a\x1a\x23\x9d\x45\x95\x8b\x85\x4a\x8c\x64\x1b\x4f\x96\xc6\x21\x5d\x75\x93\x1b\xbe\xc2\x15\x93\x71\xa3\xd8\x94\x71\xea\x8b\x3e\x38\xcf\x78\x00\xf7\x75\x30\x28\x8a\x0f\x1c\xeb\x7d\x1d\xa0\x71\x6c\x2c\x74\x8d\x1a\x9f\x2f\x4d\x2d\xd6\x5b\x02\x9d\xcc\x2d\xde\x0b\xb2\x5a\x1a\xb7\x77\xca\xf7\x84\xe1\x5f\x91\x99\x36\x41\xe6\x36\xb2\xa5\x30\x0d\xd6\x8f\x20\x18\xa7\x10\x3e\x23\x54\xd2\xc9\x11\x02\x4e\x90\xa6\x5c\x46\x11\x2e\xc9\x37\xa3\x12\x96\x7b\x6d\xc3\x5e\x87\x83\x4b\x94\x7b\x19\xf9\xfa\xce\xb5\xe8\x5b\x2f\x75\x7c\x67\x00\x37\x0e\x75\x7c\x97\xb5\x3b\xef\x73\x69\x54\x19\x63\x10\xf7\x76\x55\xa1\xd3\xd8\x89\x95\x3e\x30\x7c\xf4\xc6\x85\xf6\xaf\xb2\x4d\x8c\xd6\xc3\x5b\xbc\x85\x4f\xa4\xae\x56\x26\x36\x6a\xd2\x3b\x26\x6f\x93\xda\x4a\xb7\x98\xa9\x36\xe0\x43\x5a\xb7\x07\xf0\x9f\x01\x00\x00\xff\xff\x2c\xba\xd5\x04\xb1\x0a\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/etcd/ca.crt":                                  etcEtcdCaCrt,
	"etc/etcd/etcd.conf":                               etcEtcdEtcdConf,
	"etc/etcd/peer.crt":                                etcEtcdPeerCrt,
	"etc/etcd/peer.key":                                etcEtcdPeerKey,
	"etc/etcd/server.crt":                              etcEtcdServerCrt,
	"etc/etcd/server.key":                              etcEtcdServerKey,
	"etc/origin/master/admin.kubeconfig":               etcOriginMasterAdminKubeconfig,
	"etc/origin/master/aggregator-front-proxy.crt":     etcOriginMasterAggregatorFrontProxyCrt,
	"etc/origin/master/aggregator-front-proxy.key":     etcOriginMasterAggregatorFrontProxyKey,
	"etc/origin/master/ca.crt":                         etcOriginMasterCaCrt,
	"etc/origin/master/ca.key":                         etcOriginMasterCaKey,
	"etc/origin/master/front-proxy-ca.crt":             etcOriginMasterFrontProxyCaCrt,
	"etc/origin/master/master-config.yaml":             etcOriginMasterMasterConfigYaml,
	"etc/origin/master/master.etcd-ca.crt":             etcOriginMasterMasterEtcdCaCrt,
	"etc/origin/master/master.etcd-client.crt":         etcOriginMasterMasterEtcdClientCrt,
	"etc/origin/master/master.etcd-client.key":         etcOriginMasterMasterEtcdClientKey,
	"etc/origin/master/master.kubelet-client.crt":      etcOriginMasterMasterKubeletClientCrt,
	"etc/origin/master/master.kubelet-client.key":      etcOriginMasterMasterKubeletClientKey,
	"etc/origin/master/master.proxy-client.crt":        etcOriginMasterMasterProxyClientCrt,
	"etc/origin/master/master.proxy-client.key":        etcOriginMasterMasterProxyClientKey,
	"etc/origin/master/master.server.crt":              etcOriginMasterMasterServerCrt,
	"etc/origin/master/master.server.key":              etcOriginMasterMasterServerKey,
	"etc/origin/master/named/console.crt":              etcOriginMasterNamedConsoleCrt,
	"etc/origin/master/named/console.key":              etcOriginMasterNamedConsoleKey,
	"etc/origin/master/openshift-master.kubeconfig":    etcOriginMasterOpenshiftMasterKubeconfig,
	"etc/origin/master/scheduler.json":                 etcOriginMasterSchedulerJson,
	"etc/origin/master/service-signer.crt":             etcOriginMasterServiceSignerCrt,
	"etc/origin/master/service-signer.key":             etcOriginMasterServiceSignerKey,
	"etc/origin/master/serviceaccounts.private.key":    etcOriginMasterServiceaccountsPrivateKey,
	"etc/origin/master/serviceaccounts.public.key":     etcOriginMasterServiceaccountsPublicKey,
	"etc/origin/master/session-secrets.yaml":           etcOriginMasterSessionSecretsYaml,
	"etc/origin/node/ca.crt":                           etcOriginNodeCaCrt,
	"etc/origin/node/client-ca.crt":                    etcOriginNodeClientCaCrt,
	"etc/origin/node/node.kubeconfig":                  etcOriginNodeNodeKubeconfig,
	"etc/origin/node/pods/apiserver.yaml":              etcOriginNodePodsApiserverYaml,
	"etc/origin/node/pods/controllers.yaml":            etcOriginNodePodsControllersYaml,
	"etc/origin/node/pods/etcd.yaml":                   etcOriginNodePodsEtcdYaml,
	"etc/origin/node/pods/sync.yaml":                   etcOriginNodePodsSyncYaml,
	"etc/pki/ca-trust/source/anchors/openshift-ca.crt": etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master-startup.sh":                                masterStartupSh,
	"node-startup.sh":                                  nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"etc": {nil, map[string]*bintree{
		"etcd": {nil, map[string]*bintree{
			"ca.crt":     {etcEtcdCaCrt, map[string]*bintree{}},
			"etcd.conf":  {etcEtcdEtcdConf, map[string]*bintree{}},
			"peer.crt":   {etcEtcdPeerCrt, map[string]*bintree{}},
			"peer.key":   {etcEtcdPeerKey, map[string]*bintree{}},
			"server.crt": {etcEtcdServerCrt, map[string]*bintree{}},
			"server.key": {etcEtcdServerKey, map[string]*bintree{}},
		}},
		"origin": {nil, map[string]*bintree{
			"master": {nil, map[string]*bintree{
				"admin.kubeconfig":           {etcOriginMasterAdminKubeconfig, map[string]*bintree{}},
				"aggregator-front-proxy.crt": {etcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
				"aggregator-front-proxy.key": {etcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
				"ca.crt":                     {etcOriginMasterCaCrt, map[string]*bintree{}},
				"ca.key":                     {etcOriginMasterCaKey, map[string]*bintree{}},
				"front-proxy-ca.crt":         {etcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
				"master-config.yaml":         {etcOriginMasterMasterConfigYaml, map[string]*bintree{}},
				"master.etcd-ca.crt":         {etcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
				"master.etcd-client.crt":     {etcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
				"master.etcd-client.key":     {etcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
				"master.kubelet-client.crt":  {etcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
				"master.kubelet-client.key":  {etcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
				"master.proxy-client.crt":    {etcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
				"master.proxy-client.key":    {etcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
				"master.server.crt":          {etcOriginMasterMasterServerCrt, map[string]*bintree{}},
				"master.server.key":          {etcOriginMasterMasterServerKey, map[string]*bintree{}},
				"named": {nil, map[string]*bintree{
					"console.crt": {etcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
					"console.key": {etcOriginMasterNamedConsoleKey, map[string]*bintree{}},
				}},
				"openshift-master.kubeconfig": {etcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
				"scheduler.json":              {etcOriginMasterSchedulerJson, map[string]*bintree{}},
				"service-signer.crt":          {etcOriginMasterServiceSignerCrt, map[string]*bintree{}},
				"service-signer.key":          {etcOriginMasterServiceSignerKey, map[string]*bintree{}},
				"serviceaccounts.private.key": {etcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
				"serviceaccounts.public.key":  {etcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
				"session-secrets.yaml":        {etcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
			}},
			"node": {nil, map[string]*bintree{
				"ca.crt":          {etcOriginNodeCaCrt, map[string]*bintree{}},
				"client-ca.crt":   {etcOriginNodeClientCaCrt, map[string]*bintree{}},
				"node.kubeconfig": {etcOriginNodeNodeKubeconfig, map[string]*bintree{}},
				"pods": {nil, map[string]*bintree{
					"apiserver.yaml":   {etcOriginNodePodsApiserverYaml, map[string]*bintree{}},
					"controllers.yaml": {etcOriginNodePodsControllersYaml, map[string]*bintree{}},
					"etcd.yaml":        {etcOriginNodePodsEtcdYaml, map[string]*bintree{}},
					"sync.yaml":        {etcOriginNodePodsSyncYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"pki": {nil, map[string]*bintree{
			"ca-trust": {nil, map[string]*bintree{
				"source": {nil, map[string]*bintree{
					"anchors": {nil, map[string]*bintree{
						"openshift-ca.crt": {etcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
